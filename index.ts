type LookUpResponse =
  | {
      status: "Completed" | "Pending" | "Initiated" | "Expired";
      refunded: false;
      pidx: string;
      total_amount: number;
      transaction_id: string;
      fee: number;
    }
  | {
      status: "Refunded";
      refunded: true;
      pidx: string;
      total_amount: number;
      transaction_id: string;
      fee: number;
    };

interface AmountBreakdown {
  label: string;
  amount: number;
}

interface ProductDetails {
  identity: string;
  name: string;
  total_price: number;
  quantity: number;
  unit_price: number;
}

type Mode = "Sandbox" | "Production";

enum ApiEndPoints {
  Sandbox = "https://a.khalti.com/api/v2/",
  Production = "https://khalti.com/api/v2/",
}

interface ConstructorProps {
  /**
   * @param mode
   * - Sandbox or Production
   */

  mode: Mode;

  /**
   * @param secretKey
   * - Secret key provided by Khalti
   * - Secret key is different for Sandbox and Production
   */

  secretKey: string;

  /**
   * @param returnUrl
   * - URL where the user will be redirected after the transaction is completed
   * - must be a valid URL
   * @example
   * - https://merchant.com.np/cart
   */

  returnUrl: string;

  /**
   * @param websiteUrl
   * - URL of the merchant website
   * - must be a valid URL
   * @example
   * - https://merchant.com.np
   *
   */

  websiteUrl: string;
}

interface GetPaymentUrlProps {
  /**
   * @param amount
   * - Amount to be paid
   * - the amount should be in paisa and should be greater than 1 that is 100 paisa
   */

  amount: number;

  /**
   * @param purchase_order_id
   * - Unique identifier for order generated by the merchant
   */

  purchase_order_id: string;

  /**
   * @param purchase_order_name
   * - Order name
   */

  purchase_order_name: string;

  /**
   * @param customer_info
   * - details about the person who will be billed
   * @example
   * ```json
   *  "customer_info": {
      "name": "Niraj Acharya",
      "email": "hi@niraj.com.np",
      "phone": "9800000000"
     },
  ```
   */

  customer_info?: any;

  /**
   * @param amount_breakdown
   * - **n** length array of _label_ and _amount_ objects can be passed
   * @example
   * ```json
   *  "amount_breakdown": [
      {
          "label": "Actual Price",
          "amount": 1999
      },
      {
          "label": "VAT",
          "amount": 69
      },
      {
        "label":"Delivery Charge",
        "amount" : 100
      }
    ],
  ```
   */

  amount_breakdown?: AmountBreakdown[];

  /**
   * @param product_details
   * - product details 
   * @example
   * ```json
   *  "product_details": [
      {
          "identity": "1234567890",
          "name": "Khalti logo",
          "total_price": 1300,
          "quantity": 1,
          "unit_price": 1300
      }
  ]
  ```
   */
  product_details?: ProductDetails[];
}

export default class Khalti {
  private _mode: Mode = "Sandbox";
  private _secretKey: string = "";
  private _returnUrl: string = "";
  private _websiteUrl: string = "";
  private _apiEndPoints: ApiEndPoints = ApiEndPoints.Sandbox;

  /**
   * this sets the secret key
   * @param secretKey
   *
   */
  private _setSecretKey(secretKey: ConstructorProps["secretKey"]) {
    if (typeof secretKey === "undefined")
      throw new Error("secret key is required");
    this._secretKey = secretKey;
  }

  /**
   *
   * @param returnUrl
   * - URL where the user will be redirected after the transaction is completed
   * - must be a valid URL
   * @param websiteUrl
   * - URL of the merchant website
   * - must be a valid URL
   */

  private _setUrls(
    returnUrl: ConstructorProps["returnUrl"],
    websiteUrl: ConstructorProps["websiteUrl"]
  ) {
    if (typeof returnUrl === "undefined")
      throw new Error("redirect url is required");
    if (typeof websiteUrl === "undefined")
      throw new Error("website url is required");
    this._returnUrl = returnUrl;
    this._websiteUrl = websiteUrl;
  }

  public getPaymentUrl(props: GetPaymentUrlProps) {
    if (Object.keys(props || {}).length == 0)
      throw new Error("All required parameters should be passed");

    if (typeof window !== "undefined")
      throw new Error(
        "Cannot process this in client side, use server to avoid CORS."
      );

    const data = {
      return_url: this._returnUrl,
      website_url: this._websiteUrl,
      ...props,
    };

    return this._requestPaymentUrl(
      this._apiEndPoints + "epayment/initiate/",
      data
    );
  }

  /**
   *
   * @param url
   * - khalti payment api endpoint
   * @param data
   * - all required data aggregated
   */

  private async _requestPaymentUrl(url: string, data: any) {
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          Authorization: `Key ${this._secretKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
      return await response.json();
    } catch (error) {
      console.log(error);
    }
  }

  /**
   * @param pidx
   * - payment id of a transaction
   * @example
   * ```ts
   * const khalti = new Khalti({...})
   * await khalti.getPaymentStatus("HT6o6PEZRWFJ5ygavzHWd5")
   * ```
   */

  public getPaymentStatus(pidx: string) {
    return this._lookupRequest(this._apiEndPoints + "epayment/lookup/", pidx);
  }

  private async _lookupRequest(
    url: string,
    pidx: string
  ): Promise<LookUpResponse | null> {
    try {
      const response = await fetch(url, {
        method: "POST",
        body: JSON.stringify({ pidx }),
        headers: {
          Authorization: `Key ${this._secretKey}`,
          "Content-Type": "application/json",
        },
      });

      return await response.json();
    } catch (error) {
      console.log(error);
      return null;
    }
  }

  constructor(props: ConstructorProps) {
    if (!props) return;

    const { mode, secretKey, returnUrl, websiteUrl } = props;

    if (typeof secretKey === "undefined")
      throw new Error("khalti secret key is required");

    this._mode = mode;
    this._setSecretKey(secretKey);
    this._setUrls(returnUrl, websiteUrl);

    if (this._mode === "Sandbox") {
      this._apiEndPoints = ApiEndPoints.Sandbox;
    }

    if (this._mode === "Production") {
      this._apiEndPoints = ApiEndPoints.Production;
    }
  }
}
